/* -*- mode: c++; coding: utf-8; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; show-trailing-whitespace: t -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

  This file is part of the Feel library

  Author(s): Simone Deparis <simone.deparis@epfl.ch>
       Date: 2007-07-10

  Copyright (C) 2007 EPFL

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 3.0 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
/**
   \file molecule.hpp
   \author Simone Deparis <simone.deparis@epfl.ch>
   \date 2007-07-10
 */

#ifndef _MOLECULE_HPP
#define _MOLECULE_HPP


#include <feel/feelcore/feel.hpp>

#include <list>
#include <string>

#include "atom.hpp"

namespace Feel
{

/**
 * \class Molecule
 * \brief Molecule's definition and functions
 *
 * This class defines a Molecule as a set of atoms.
 * This is supposed to work with the Atom class.
 * \ingroup ??
 * @author Simone Deparis
 * @see Im, Beglov, and Roux, "Continuum Solvation Model: ..."
 */
class Molecule
{
public:

    /** @name Enums
     */
    //@{
    /** @name file type to be loaded
     */
    enum FILETYPE { PQR = 0,  CRD };
    //@}

    /** @name Typedefs
     */
    //@{

    typedef Atom atom_type;
    typedef std::list<atom_type>  atoms_list_type;
    typedef atoms_list_type::const_iterator atoms_const_iterator_type;
    typedef atom_type::node_type node_type;
    //@}


    /** @name Constructors, destructor
     */
    //@{


    /**
     * default atom constructor: atom at origin with zero radius and charges
     */
    Molecule();

    Molecule( Molecule const& molecule );

    ~Molecule();

    //@}

    /** @name Operator overloads
     */
    //@{

    Molecule& operator=( Molecule const& molecule );

    //@}

    /**
     * read a PQR file which looks like
    REMARK   1 PQR file generated by PDB2PQR (Version 1.2.1)
    REMARK   (...)
    ATOM      1  N   PRO     1     -15.656  10.553  -3.283 -0.0700 1.8500
    ATOM     (...)

     * retuns 0 if line read successfully, otherwise 1
     */
    int readPQRfile( std::string const filename );

    /**
     * read cha-crd and rad-crd files which look like
    * NONE *
    *                                      CREATED BY pqr2crd
    *
    5084
    1    1 GLY  N    -24.90000   6.97500   4.91400 SEG1  -2   -0.30000

     * retuns 0 if line read successfully, otherwise 1

     */
    int readCRDfile( std::string const filename );

    /**
     * read part of an already opened dock4file which looks like
    REMARK   1 PQR file generated by PDB2PQR (Version 1.2.1)
    REMARK   (...)
    ATOM      1  N   PRO     1     -15.656  10.553  -3.283 -0.0700 1.8500
    ATOM     (...)
    REMARK   (...)
       and stops at the next REMARK

     * retuns 0 if line read successfully, 1 if it reached end of file,
       something else if something happend

     * NOTE: this method only loads the new coordinates. Charges and positions should be in place already
     */
    int readDock4file(   std::ifstream& dock4file );

    void showMe() const;

    atoms_const_iterator_type begin() const
    {
        return M_atoms.begin();
    }
    atoms_const_iterator_type end()   const
    {
        return M_atoms.end();
    }
    size_type size() const
    {
        return M_atoms.size();
    }

    void domainMinMax( node_type& _min, node_type& _max ) const;

    value_type totalCharge() const;
    value_type totalAbsCharge() const;

    std::string name() const
    {
        return moleculeName;
    }

private:

    std::string clearRemarks( std::string const remStr,
                              std::ifstream& file ) const;

    std::list<atom_type> M_atoms;
    std::string moleculeName;

}; // end class Molecule


} // end namespace Feel

#endif
