###  CMakeLists.txt ---

#  Author(s): Christophe Prud'homme <christophe.prudhomme@ujf-grenoble.fr>
#       Date: 2010-06-12
#
#  Copyright (C) 2010 Universite Joseph Fourier (Grenoble I)
#
# Distributed under the GPL(GNU Public License):
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#
include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
add_custom_target(gen_feel_perf_stokes ALL )

foreach(S "Simplex" "Hypercube")
set( CR1P0 "// this file is automatically generated
#include <stokes.hpp>
namespace Feel{
 template class Stokes<2, CrouzeixRaviart<1, Vectorial>,Lagrange<0, Scalar,Discontinuous>, ${S}>\\;
}
")
OVERWITE_IF_DIFFERENT(gen_feel_perf_stokes "feel_perf_stokes_${S}_cr1p0.cpp" "${CR1P0}" stokes.hpp)
set(cr1p0 "${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_${S}_cr1p0.cpp;${cr1p0}")
endforeach()

#foreach(N 2 3 4 5)
#foreach(S "Simplex" "Hypercube")
foreach(S "Simplex" )
foreach(D 2)
  foreach(N 2 3 )
    math (EXPR P '${N}-1')
    set( LAG "// this file is automatically generated
#include <stokes.hpp>
namespace Feel {
  template class Stokes<${D}, Lagrange<${N}, Vectorial>,Lagrange<${P}, Scalar>, ${S}>\\;
}
")
    OVERWITE_IF_DIFFERENT(gen_feel_perf_stokes "feel_perf_stokes_${S}_${D}D_p${N}p${P}.cpp" "${LAG}" stokes.hpp)
    set(taylor_hood "${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_${S}_${D}D_p${N}p${P}.cpp;${taylor_hood}")
  endforeach()
endforeach()
endforeach()

foreach(S "Simplex" "Hypercube")
foreach(D 3)
  foreach(N 2 3 4 5 )
    math (EXPR P '${N}-1')
    set( LAG "// this file is automatically generated
#include <stokes.hpp>
namespace Feel {
  template class Stokes<${D}, Lagrange<${N}, Vectorial>,Lagrange<${P}, Scalar>, ${S}>\\;
}
")
    OVERWITE_IF_DIFFERENT(gen_feel_perf_stokes "feel_perf_stokes_${S}_${D}D_p${N}p${P}.cpp" "${LAG}" stokes.hpp)
    set(taylor_hood3 "${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_${S}_${D}D_p${N}p${P}.cpp;${taylor_hood3}")
  endforeach()
endforeach()
endforeach()

feelpp_add_application( perf_stokes_convergence SRCS bench.cpp ${taylor_hood}
  CFG stokes.cfg poiseuille.cfg kovasnay.cfg ethiersteinmann.cfg
  GEO poiseuille.geo ethiersteinmann.geo kovasnaystraight1.geo kovasnaystraight2.geo kovasnay_curve.geo straighttube.geo
  LINK_LIBRARIES ${FEELPP_LIBRARIES}
  DEPS gen_feel_perf_stokes)



add_custom_target(gen_feel_perf_stokes_pressure ALL )
foreach(N 2 )
  math (EXPR P '${N}-1')
  foreach(G 1  )
    foreach(D 2 3)

      set( LAG "// this file is automatically generated
#include <stokes_pressure.hpp>
namespace Feel {
  template class Stokes<${D}, ${N}, ${G}>\\;
}
")
      OVERWITE_IF_DIFFERENT(gen_feel_perf_stokes_pressure "feel_perf_stokes_pressure_${D}D_P${N}P${P}G${G}.cpp" "${LAG}" stokes_pressure.hpp)
      set(taylor_hood_p${D} "${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_pressure_${D}D_P${N}P${P}G${G}.cpp;${taylor_hood_p${D}}")
    endforeach()
  endforeach()
endforeach()

feelpp_add_application( perf_stokes_pressure_2D SRCS stokes_pressure.cpp ${taylor_hood_p2} LABELS benchmarks GEO curvedtube.geo curvedtube3d.geo straighttube.geo DEFS DIM2=2 DEPS gen_feel_perf_stokes_pressure)
#Disabled as long as it tooks too much memory
#feelpp_add_application( perf_stokes_pressure_3D SRCS stokes_pressure.cpp ${taylor_hood_p3} LABELS benchmarks GEO curvedtube.geo curvedtube3d.geo straighttube.geo DEFS DIM3=3 DEPS gen_feel_perf_stokes_pressure)
feelpp_add_application( perf_stokes_pressure_lm_2D SRCS stokes_pressure.cpp ${taylor_hood_p2} LABELS benchmarks DEFS FEELPP_USE_LM DIM2=2 DEPS gen_feel_perf_stokes_pressure)
#Disabled as long as it tooks too much memory
#feelpp_add_application( perf_stokes_pressure_lm_3D SRCS stokes_pressure.cpp  ${taylor_hood_p3} LABELS benchmarks DEFS FEELPP_USE_LM DIM3=3 DEPS gen_feel_perf_stokes_pressure)

feelpp_add_application( perf_stokes_kovaznay_straight_bottom SRCS stokes_kovaznay.cpp  LABELS benchmarks DEFS BOTTOM2  NO_TEST)
feelpp_add_application( perf_stokes_kovaznay_curved_bottom SRCS stokes_kovaznay.cpp  LABELS benchmarks DEFS BOTTOM1  NO_TEST)


add_subdirectory(Poiseuille)
add_subdirectory(brain)
#add_subdirectory(Kovasnay_Curved_Bottom)
